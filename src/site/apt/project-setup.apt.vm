 ---
 Project setup
 ---
 Ivo Maixner
 ---
 2011-10-21
 ---

Project setup

* POM

** Maven dependencies

 Add JUnit dependency to your POM.
 Use the version used by Light Air itself.

+---+
<dependency>
 <groupId>junit</groupId>
 <artifactId>junit</artifactId>
 <version>${junit-version}</version>
 <scope>test</scope>
</dependency>
+---+

 Add Light Air dependency to your POM:

+---+
<dependency>
 <groupId>net.sf.lightair</groupId>
 <artifactId>light-air</artifactId>
 <version>${project.version}</version>
 <scope>test</scope>
</dependency>
+---+

 Have an slf4j runtime compatible with slf4j used by Light Air.
 Logback is recommended.

+---+
<dependency>
 <groupId>ch.qos.logback</groupId>
 <artifactId>logback-classic</artifactId>
 <version>1.0.0</version>
 <scope>test</scope>
</dependency>
+---+

*** Optional: for web applications

 Add JWebUnit plugin dependency of your choice: either HtmlUnit or Selenium.
 HtmlUnit plugin is recommended.
 Use a version compatible with jwebunit-core pulled in by Light Air itself.

+---+
<dependency>
 <groupId>net.sourceforge.jwebunit</groupId>
 <artifactId>jwebunit-htmlunit-plugin</artifactId>
 <version>${jwebunit-version}</version>
 <scope>test</scope>
</dependency>
+---+

** Test resources

 The XML dataset files are expected to be next to the test class, in the same package.
 This way you are not required to chase them all over the project 
 or switch regularly between the test class directory and test resources directory.
 
 To support this properly in Maven (and m2eclipse), use the following:
 
+---+
<build>
 <testResources>
  <testResource>
   <directory>src/test/resources</directory>
  </testResource>
  <testResource>
   <directory>src/test/java</directory>
   <includes>
    <include>**</include>
   </includes>
   <excludes>
    <exclude>**/*.java</exclude>
   </excludes>
  </testResource>
 </testResources>
</build>
+---+

** Integration tests profile

 As Light Air tests require the application to be deployed and running
 on an application server, 
 it is typically not desirable that they be run as unit tests in 
 the Maven <<<test>>> lifecycle phase.
 
 A way to approach this issue is to name the test with "*IT.java" suffix
 (as opposed to "*Test.java"). 
 This excludes them from the Maven <<<test>>> lifecycle phase.
 Next, define a profile to run the Light Air tests:

+---+
<profiles>
 <profile>
  <id>it</id>
  <build>
   <plugins>
    <plugin>
     <groupId>org.jboss.as.plugins</groupId>
     <artifactId>jboss-as-maven-plugin</artifactId>
     <executions>
      <execution>
       <id>deploy-pre-integration-test</id>
       <phase>pre-integration-test</phase>
       <goals>
        <goal>deploy</goal>
       </goals>
      </execution>
     </executions>
    </plugin>
    <plugin>
     <groupId>org.apache.maven.plugins</groupId>
     <artifactId>maven-surefire-plugin</artifactId>
     <version>2.9</version>
     <executions>
      <execution>
       <id>integration-test</id>
       <phase>integration-test</phase>
       <goals>
        <goal>test</goal>
       </goals>
       <configuration>
        <includes>
         <include>**/*IT.java</include>
        </includes>
       </configuration>
      </execution>
     </executions>
    </plugin>
   </plugins>
  </build>
 </profile>
</profiles>
+---+

 The example above also includes the deployment of the packaged application
 to a JBoss AS. You would replace that with a configuration corresponding
 to your application/web server.
 
 Now, you can package your WAR file, deploy it to application server and 
 execute all Light Air integration tests by issuing:

+---+
mvn clean install -Pit
+---+

 where <<<-Pit>>> activates the "integration tests" profile.
 
 After that, you can open any test in your IDE and run it as an ordinary unit test 
 to take advantage of IDE support.

* Properties file

 Create <<<light-air.properties>>> file in <<<src/test/resources>>>
 with the following content (example for H2 database):
 
+---+
# Database connection
database.driverClassName=org.h2.Driver
database.connectionUrl=jdbc:h2:~/data/my-project/db;AUTO_SERVER=TRUE;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE
database.userName=sa
database.password=

# Database dialect
# Select one of: h2, oracle, oracle9, oracle10, hsqldb, mysql, db2, postgresql, derby, mssql
database.dialect=h2

# Database default schema
# Set the schema to be used when no schema is specified in a dataset
database.defaultSchema=PUBLIC

# Names of database schemas from which to generate the XSDs
# Use a comma-separated list for multiple schemas: SCHEMA1,SCHEMA2,SCHEMA3
database.schemaNames=PUBLIC

# Set the maximum allowable difference of temporal column values in verification
# This value should be greater than the maximum duration of any test case (on any environment)
time.difference.limit.millis=5000

# uncomment to escape table and column names:
#dbunit.properties.escapePattern="?"

# uncomment to use batched statements:
#dbunit.features.batchedStatements=true

# uncomment to skip Oracle recycle bin tables:
#dbunit.features.skipOracleRecycleBinTables=true
+---+

 Be aware, that Light Air tests must connect to <<the same database instance>>
 as the application running within the application server.\
 Therefore you are looking to access the database in a "server mode", 
 or via "TCP connection", as opposed to "in-memory mode" or "embedded mode".
 
 The same connection URL must be configured for the data source of the application 
 in the application server.

* Generate XSD files

 Use the {{{http://lightairmp.sourceforge.net/} LightAir Maven plugin}} 
 to generate XSD files from the database.

* Logback test configuration file

 If you use Logback as the slf4j runtime, 
 create a file named <<<logback-test.xml>>> in <<<src/test/resources>>>
 with content recommended on Logback site.
 
 This file lets you manage logging in tests, including log output from Light Air.
 
* Resolving problems with slf4j runtime versions

 When another dependency overrides slf4j API with a conflicting incompatible version  
 you may have to override it explicitly in POM.

*--:
 {{{./write-test.html}Next: Write a test >>}}
*--:
