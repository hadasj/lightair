 ---
 Features
 ---
 Ivo Maixner
 ---
 2011-09-26
 ---

Features

* Setup-specific features

 [[1]] <<Default @Setup annotation>>\
 When test method or test class is annotated with <<<@Setup>>>, system locates dataset named\
 <<<\<test class name\>.\<test method name\>.xml>>>\
 in the package of the test class, or if it does 
 not exists, locates dataset named\
 <<<\<test class name\>.xml>>>\
 and performs <<"clean insert">> database operation with the dataset located. 
 If no such dataset exists, system throws exception.

 <Examples:>

+---+
@Setup
public class MyTest {
	@Test
	public void test() {
	}
}
+---+

 [[2]] <<Specify dataset file names in @Setup>>\
 When <<<@Setup>>> annotation contains <<file names>> of datasets, system uses those file names
 to locate the datasets in the package of the test class 
 and performs "clean insert" database operation with <<all>> datasets located. 
 If a specified dataset does not exist, system throws exception.

 <Examples:>

+---+
@Setup({ "setup-1.xml", "setup-2.xml" })
public class MyTest {
	@Test
	public void test() {
	}
}
+---+

 [[3]] <<Use all columns of a row in setup>>\
 When inserting a row during setup, fill values to all columns defined <<on the row>>,
 no matter what columns were defined on other rows of the table.\
 This fixes bug of DbUnit, where the first row of the table freezes columns used
 by the dataset, other columns defined on subsequent rows are then ignored by DbUnit.

 <Examples:>

+---+
<dataset>
	<table first_has_value="a" />
	<table first_has_value="b" first_missing="c" />
	<table                     first_missing="d" third_only="e" />
</dataset>
+---+

* Verification-specific features

 [[1]] <<Default @Verify annotation>>\
 When test method or test class is annotated with <<<@Verify>>>, system locates dataset named\
 <<<\<test class name\>.\<test method name\>-verify.xml>>>\
 in the package of the test class, 
 or if it does not exists, locates dataset named\
 <<<\<test class name\>-verify.xml>>>\
 and <<verifies>> the dataset against the database. 
 If no such dataset exists, system throws exception.

 <Examples:>

+---+
@Verify
public class MyTest {
	@Test
	public void test() {
	}
}
+---+

 [[2]] <<Specify dataset file names in @Verify>>\
 When <<<@Verify>>> annotation contains <<file names>> of datasets, system uses those file names
 to locate the datasets in the package of the test class 
 and verifies the dataset against the database with <<all>> datasets located merged into one. 
 If a specified dataset does not exist, system throws exception.
 
 <Examples:>

+---+
@Verify({ "verify-1.xml", "verify-2.xml" })
public class MyTest {
	@Test
	public void test() {
	}
}
+---+
 
 [[3]] <<Verification fails when a column value does not match>>\
 Detailed message indicating the particular row and column is displayed.

 [[4]] <<Row order is irrelevant in verification>>\
 Rows in verification dataset may be in <<any order>>.

 [[5]] <<Verification fails when an expected row is not found in database>>\
 Detailed message indicating the particular row is displayed.

 [[6]] <<Table not specified in expected dataset is ignored in verification>>

 [[7]] <<Column not specified in expected row is ignored in verification>>\
 When a column is not present on a row of an expected dataset, 
 its value in database row is <<ignored>>. 
 This works regardless whether the column is specified in the expected dataset 
 on any other row.

 <Examples:>

+---+
<dataset>
	<table expected="a" unspecified="b" />
	<table expected="c" />
	<table expected="e" unspecified="f" />
</dataset>
+---+

 The value of column <<<unspecified>>> in the second row will be ignored.

 [[8]] <<Use all columns of a row in verification>>\
 When verifying a row, use values of all columns defined <<on the row>>,
 no matter what columns were defined on other rows of the table.\
 This fixes bug of DbUnit, where the first row of the table freezes columns used
 by the dataset, other columns defined on subsequent rows are then ignored by DbUnit.

 <Examples:>

+---+
<dataset>
	<table expected="a" />
	<table expected="b" unspecified="c" />
	<table expected="d" />
</dataset>
+---+

 The value of column <<<unspecified>>> in the second row will be verified.

 [[9]] <<Verify that table expected to be empty is empty in database>>\
 Fail when there are rows in the table in database.

 <Examples:>

+---+
<dataset>
	<table />
</dataset>
+---+

 [[10]] <<Verification fails when an unexpected row is found in database>>\
 Detailed message indicating the particular row is displayed.

 [[11]] <<Match table rows by number of matching columns in verification>>\
 When matching rows of a database table, 
 first sort actual rows by the <<number of matching columns>> 
 to any best-matching expected row, 
 then match each actual row in that order to best-matching remaining expected row.

 [[12]] <<Support variables in verification>>\
 Use <<$name>> expressions as <<variables>> in verification datasets 
 to verify that two (or more) column values are equal.
 This can be used for example to verify a <<foreign key>> 
 referencing a generated primary key.

 <Examples:>

+---+
<dataset>
	<order id="$orderId" number="1234-567" />
	<line_item id="@any" order_id="$orderId" quantity="10" />
	<line_item id="@any" order_id="$orderId" quantity="30" />
</dataset>
+---+

 [[13]] <<Include primary keys in verification failure message>>\
 Display actual database content in verification failure message 
 including primary key column values.

 [[14]] <<Ignore column with value @any>>\
 Use <<<@any>>> in verification XML dataset to specify 
 that the actual column value should be <<ignored>>.\
 This is equivalent to omitting the column in the row.
 By using @any you can <<explicitly>> specify that the column value should be ignored. 

* Common database features (apply for both setup and verification)

 [[1]] <<Replace @null with null value>>\
 Use <<<@null>>> in XML dataset to setup column to <<null value>> and to verify a column has null value.

 [[2]] <<Replace @date with current date>>\
 Use <<<@date>>> in XML dataset to setup column to <<current date>> midnight value 
 and to verify a column has that value.\
 The current date value includes <<<yyyy-MM-dd>>>
 as in <2012-12-31>.\
 The time part it set to / verified to be midnight <00:00:00.000>.

 [[3]] <<Replace @time with current time>>\
 Use <<<@time>>> in XML dataset to setup column to <<current time>> value 
 and to verify a column has that value.\
 The current time value includes <<<HH:mm:ss>>> as in <23:59:58>.\
 The date part is set to / verified to be 1970-01-01. 
 The milliseconds are set to / verified to be 0 (zero).

 [[4]] <<Replace @timestamp with current timestamp>>\
 Use <<<@timestamp>>> in XML dataset to setup column to <<current timestamp>> value 
 and to verify a column has that value.\
 The current timestamp value includes <<<yyyy-MM-dd HH:mm:ss.SSS>>>
 as in <2012-12-31 23:59:58.123>.
 
 [[5]] <<Specify database schema of a table row using XML namespace>>\
 Specify row <<schema>> using XML namespace:

+---+
<dataset xmlns:s1="SCHEMA1">
	<s1:table_in_s1 id="0" />
</dataset>
+---+

* Execute application
 
 [[1]] <<Set base URL using annotation>>\
 Annotate test method or test class with <<<@BaseUrl>>> to set <<base URL>> for a test.\
 Annotate <<base class>> of multiple test classes with @BaseUrl to set base URL for all the inheriting test classes.

* Configuration

 [[1]] <<Database dialect>>\
 Set the <<<database.dialect>>> property to the name of the database you use for the tests.\
 Select one of: <<<h2>>>, <<<oracle>>>, <<<oracle9>>>, <<<oracle10>>>, <<<hsqldb>>>, 
 <<<mysql>>>, <<<db2>>>, <<<postgresql>>>, <<<derby>>>, <<<mssql>>>.

 [[2]] <<Set time difference limit>>\
 Set the <<<time.difference.limit.millis>>> property to define a <<maximum
 allowable difference>> in milliseconds of <<temporal columns>>.\
 Set this to an expected duration of the longest test on the slowest environment,
 with some safety margin.

 <Examples:> 5000 (= 5 seconds), 60000 (= 1 minute).

 [[3]] <<Configure DbUnit>>\
 Use the following pattern to configure <<DbUnit features and properties>> in <<<light-air.properties>>>:

+---+
dbunit.features.<feature-name>=<feature-value>
dbunit.properties.<property-name>=<property-value>
+---+

 where:

  * <<<\<feature-name\>>>> is the remainder of the DbUnit property name 
 after the <<<http://www.dbunit.org/features/>>>

  * <<<\<property-name\>>>> is the remainder of the DbUnit property name 
 after the <<<http://www.dbunit.org/properties/>>> prefix

 If the property value is a valid Java <<class name>> and the class has a public, no-args constructor,
 an <<instance>> of the class is <<instantiated>> and passed to DbUnit.

 See {{{http://dbunit.sourceforge.net/properties.html} DbUnit properties and features documentation}}.
 
 <Examples:>

 To set the escape pattern to quote the table and column names in double-quotes:

+---+
dbunit.properties.escapePattern="?"
+---+

 To override the DbUnit database dialect to Oracle 10+:

+---+
dbunit.properties.datatypeFactory=org.dbunit.ext.oracle.Oracle10DataTypeFactory
+---+

* Generate XSD
 
 [[1]] <<Generate XSD from database to enable writing dataset files>>\
 Use the {{{http://lightairmp.sourceforge.net/} LightAir Maven plugin}} 
 to generate XSD files from the database
 that will help you write the XML dataset files.

 []

*--:
 {{{./development.html}Next: Development >>}}
*--:
