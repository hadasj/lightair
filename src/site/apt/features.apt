 ---
 Features
 ---
 Ivo Maixner
 ---
 2011-09-26
 ---

Features

Setup

 [[S1]] <<Default @Setup annotation>>\
 When test method or test class is annotated with @Setup, system locates data set named 

+---+
<test class name>.<test method name>.xml
+---+

 in the package of the test class, or if it does 
 not exists, locates data set named 

+---+
<test class name>.xml
+---+

 and performs "clean insert" database operation with the data set located. 
 If no such data set exists, system throws exception.

 [[S2]] <<Specify data set file names in @Setup>>\
 When @Setup annotation contains file names of data sets, system uses those file names
 to locate the data sets in the package of the test class 
 and performs "clean insert" database operation with all data sets located. 
 If a specified data set does not exist, system throws exception.

 [[S3]] <<Use all columns of a row in setup>>\
 When inserting a row during setup, fill values to all columns defined on the row,
 no matter what columns were defined on other rows of the table.\
 This fixes bug of DbUnit, where the first row of the table freezes columns used
 by the data set, other columns defined on subsequent rows are then ignored by DbUnit.

 [[S4]] <<Replace @null with null value in setup>>\
 Use @null in XML dataset to specify null value.
 
 [[S5]] <<Specify database schema of a table row using XML namespace in setup>>\
 Specify row schema using XML namespace:

+---+
<dataset xmlns:s1="SCHEMA1">
	<s1:table_s1 id="0" />
</dataset>
+---+

Verify

 [[V1]] <<Default @Verify annotation>>\
 When test method or test class is annotated with @Verify, system locates data set named 

+---+
<test class name>.<test method name>-verify.xml
+---+

 in the package of the test class, 
 or if it does not exists, locates data set named 

+---+
<test class name>-verify.xml
+---+

 and verifies the data set against the database. 
 If no such data set exists, system throws exception.

 [[V2]] <<Specify data set file names in @Verify>>\
 When @Verify annotation contains file names of data sets, system uses those file names
 to locate the data sets in the package of the test class 
 and verifies the data set against the database with all data sets located merged into one. 
 If a specified data set does not exist, system throws exception.
 
 [[V3]] <<Verification fails when a column value does not match>>\
 Detailed message indicating the particular row and column is displayed.
 
 [[V4]] <<Row order is irrelevant in verification>>\
 Rows in verification dataset may be in any order.
 
 [[V5]] <<Verification fails when an expected row is not found in database>>\
 Detailed message indicating the particular row is displayed.
  
 [[V6]] <<Table not specified in expected dataset is ignored in verification>>
  
 [[V7]] <<Column not specified in expected row is ignored in verification>>\
 When a column is not present on a row of an expected dataset, 
 its value in database row is ignored. 
 This works regardless whether the column is specified in the expected dataset 
 on any other row.
 
 [[V8]] <<Use all columns of a row in verification>>\
 When verifying a row, use values of all columns defined on the row,
 no matter what columns were defined on other rows of the table.\
 This fixes bug of DbUnit, where the first row of the table freezes columns used
 by the data set, other columns defined on subsequent rows are then ignored by DbUnit.

 [[V9]] <<Verify that table expected to be empty is empty in database>>\
 Fail when there are rows in the table in database.
 
 [[V10]] <<Verification fails when an unexpected row is found in database>>\
 Detailed message indicating the particular row is displayed.
 
 [[V11]] <<Match table rows by number of matching columns in verification>>\
 When matching rows of a database table, 
 first sort actual rows by the number of matching columns 
 to any best-matching expected row, 
 then match each actual row in that order to best-matching remaining expected row.
  
 [[V12]] <<Support variables in verification>>\
 Use $name expressions as variables in verification datasets 
 to verify that two (or more) column values are equal.
 This can be used for example to verify a foreign key 
 referencing a generated primary key.
 
 [[V13]] <<Include primary keys in verification failure message>>\
 Display actual database content in verification failure message 
 including primary key column values.
 
Execute
 
 [[E1]] <<Set base URL using annotation>>\
 Use @BaseUrl to set base URL for a test.
 