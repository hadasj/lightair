 ---
 Setup database
 ---
 Ivo Maixner
 ---
 2011-09-26
 ---

Setup database

 [[1]] <<Default @Setup annotation>>\
 When test method or test class is annotated with <<<@Setup>>>, system 
 locates sequentially the following files in the package of the class, the first file found wins:

  * <<<\<test class name\>.\<test method name\>.xml>>>

  * <<<\<test method name\>.xml>>>

  * <<<\<test class name\>.xml>>>
 
 Then performs <<"clean insert">> database operation with the dataset located. 
 If no such dataset exists, system throws exception.

 <Examples:>

+---+
@Setup
public class MyTest {
	@Test
	public void test() {
	}
}
+---+

 [[2]] <<Specify dataset file names in @Setup>>\
 When <<<@Setup>>> annotation contains <<file names>> of datasets, system uses those file names
 to locate the datasets in the package of the test class 
 and performs "clean insert" database operation with <<all>> datasets located. 
 If a specified dataset does not exist, system throws exception.

 <Examples:>

+---+
@Setup({ "setup-1.xml", "setup-2.xml" })
public class MyTest {
	@Test
	public void test() {
	}
}
+---+

 [[3]] <<Specify profile in @Setup>>\
 Use <<<profile>>> attribute of <<<@Setup>>> annotation to instruct Light Air to 
 apply the datasets on the <<connection defined by the profile>>.\
 See the Profiles section in {{{./configure.html}Configure Light Air}} for details
 on how to setup profiles.

 <Examples:>

+---+
@Setup(value = { "setup-1.xml", "setup-2.xml" }, profile = "oracle")
public class MyTest {
	@Test
	public void test() {
	}
}
+---+

 [[4]] <<Specify multiple @Setup annotations>>\
 Use <<<@Setup.List>>> annotation to define <<multiple>> <<<@Setup>>> <<annotations>>
 for the same test class or test method.

 <Examples:>

+---+
@Setup.List({
	@Setup("setup-h2.xml"),
	@Setup(value = "setup-hsql.xml", profile = "hsql"),
	@Setup(value = { "setup-ora-1.xml", "setup-ora-2.xml" }, profile = "oracle") })
public class MyTest {
	@Test
	public void test() {
	}
}
+---+

 [[5]] <<Use all columns of a row in setup>>\
 When inserting a row during setup, fill values to all columns defined <<on the row>>,
 no matter what columns were defined on other rows of the table.\
 This fixes bug of DbUnit, where the first row of the table freezes columns used
 by the dataset, other columns defined on subsequent rows are then ignored by DbUnit.

 <Examples:>

+---+
<dataset>
	<table first_has_value="a" />
	<table first_has_value="b" first_missing="c" />
	<table                     first_missing="d" third_only="e" />
</dataset>
+---+

 [[6]] <<Replace @null with null value>>\
 Use <<<@null>>> in XML dataset to setup column to <<null value>> explicitly.
 (By omitting the column on the row you can also set it up to null value implicitly.)

 [[7]] <<Replace @date with current date>>\
 Use <<<@date>>> in XML dataset to setup column to <<current date>> midnight value.\
 The current date value includes <<<yyyy-MM-dd>>>
 as in <2012-12-31>.\
 The time part is set to midnight <00:00:00.000>.

 [[8]] <<Replace @time with current time>>\
 Use <<<@time>>> in XML dataset to setup column to <<current time>> value.\
 The current time value includes <<<HH:mm:ss>>> as in <23:59:58>.\
 The date part is set to 1970-01-01. 
 The milliseconds are set to 0 (zero).

 [[9]] <<Replace @timestamp with current timestamp>>\
 Use <<<@timestamp>>> in XML dataset to setup column to <<current timestamp>> value.\
 The current timestamp value includes <<<yyyy-MM-dd HH:mm:ss.SSS>>>
 as in <2012-12-31 23:59:58.123>.

 [[10]] <<Modify the temporal tokens with a duration>>\
 You can modify the temporal tokens <<<@date>>>, <<<@time>>> and <<<@timestamp>>> by 
 appending a sign (+ or -) and a 
 {{{http://en.wikipedia.org/wiki/ISO_8601#Durations}duration in ISO 8601 format}}.
 This will move the time instant represented by the temporal token 
 in the direction of the sing by the duration specified.

 <Examples:>

  * The bare token <<<@date>>> represents the last midnight.

  * This <<<@date+P1D>>> represents the first following midnight.

  * This <<<@date-P1M>>> represents the midnight one month before the last one.

  * This <<<@date+PT12H>>> represents noon today.

  * This <<<@timestamp+PT1H>>> represents one hour in the future.

  * This <<<@timestamp-P2Y3M4DT5H6M7S>>> represents 
  2 years, 3 months, 4 days, 5 hours, 6 minutes and 7 seconds in the past.

 [[11]] <<Generate column value automatically with @auto>>\
 Use <<<@auto>>> as a column value to have the actual value <<generated automatically>>.\
 The value is guaranteed to be <<unique>>, with the obvious exception of boolean columns.

 <Examples:>

+---+
<dataset>
	<user id="@auto" email="@auto" name="@auto" password="@auto" version="@auto" />
	<user id="@auto" email="@auto" name="@auto" password="@auto" version="@auto" />
	<user id="@auto" email="@auto" name="@auto" password="@auto" version="@auto" />
</dataset>
+---+

 [[12]] <<Specify database schema of a table row using XML namespace>>\
 Specify row <<schema>> using XML namespace:

+---+
<dataset xmlns:s1="SCHEMA1">
	<s1:table_in_s1 id="0" />
</dataset>
+---+

 []

*--:
 {{{./verify.html}Next: Verify database >>}}
*--:
